    //C语言是编译型语言
    //C语言特点：灵活度高，效率高，可移植度高
    //C语言不在乎缩进

    //编辑器：只有编辑功能
    //“.c”为后缀的文件叫“源文件”
    //“.h”为后缀的文件叫“头文件”
    //添加新项目的时候后缀应该为“.c”, 如果后缀是”.cpp”编译器会按照C++的语法来编译代码
    //如果想要开机自动运行程序，可以打开 服务 ，把进程设成 自动启动
    //#define _CRT_SECURE_NO_WARNINGS   //解决scanf返回值忽略的问题,只有VS编译器有这个问题
    //system("cls");		cls 作用是清空屏幕，使用时要在前面加上头文件：#include <stdlib.h>
    //Sleep(毫秒数字);		作用是睡眠，延时多少毫秒，使用时要加头文件：#include <windos.h>
    
    //计算机上的存储设备（按速度由高到低，空间由小到大排列）：
    //寄存器(集成到CPU上)
    //高速缓存(cache)
    //内存
    //硬盘

    //C语言语句可分为五类：
        //1.表达式语句
        //2.函数调用语句
        //3.控制语句，用于控制程序的执行流程，以实现程序的各种结构方式。
            //他们由特定的语句定义符组成，C语言有9种控制语句如下，
            //条件判断语句(分支语句)：if语句，switch语句
            //循环执行语句：do while语句，while语句，for语句
            //转向语句：break语句，goto语句，continue语句，return语句
        //4.复合语句
        //5.空语句，就只有一个 ; 

    // 0 是数字0
    // \0 是字符，ASCII值是0
    // 数字 0 和 \0 没什么区别，因为ASCII值相同，都是0
    // '0'是字符 0,ASCII值是48
    // EOF 是 end of file，是文件的结束标志，值是-1


    // 这种注释方法只能注释一行
    /*
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
    */
    
    //转义字符:
        // \? 在书写连续多个问号时使用，防止他们被解析成三字母词(现在已经消失)
        //  \' 用于表示字符常量'
        //  \" 用于表示一个字符产内部的双引号
        //  \\ 用于表示一个反斜杠，防止它被解释为一个转义序列符
        //  \a 警告字符，蜂鸣
        //  \b 退格符
        //  \f 进纸符
        //  \n 换行
        //  \r 回车
        //  \t 水平制表符
        //  \v 垂直制表符
        //  \ddd ddd表示1~3个八进制的数字。如：\130 表示 X
        //  \xdd dd表示2个十六进制数字。如: \x30 表示 0
        //  %d - 打印整型
        //  %c - 打印字符
        //  %s - 打印字符串
        //  %f - 打印float类型
        //  %lf - 打印double类型
        //  %zu - 打印sizeof的返回值

#include<stdio.h>   //必须包含头文件
    //stdio.h 是头文件，std代表 standard 标准，i代表 input 输入，o代表 output 输出

int main()  //	//int 代表：整型类型
	//C语言代码中一定要有main函数，主函数是函数的入口，有且只有一个
{
    printf("Hello World!");  //每个语句后必须要用 ;
        //printf 是一个库函数，专门用来打印数据
    return 0;
}

    //变量：明确目标并提供存放的空间
        //局部变量 - 在{ }内部定义的变量
        	// 局部变量的作用域是局部变量所在的局部范围
        	// 局部变量的生命周期是进入作用域生命周期开始，出作用域生命周期结束
        //全局变量 - 在{ }外部定义的变量
        	// 全局变量的作用域是整个工程
        	// 全局变量的生命周期是整个程序的生命周期
        	//在全局变量和局部变量名字相同的情况下，局部优先
        	//建议全局变量和局部变量的名字不要相同
    //小贴士：
        //定义变量的时候，一定要初始化。不可以直接 int a; 要写成 int a = 0;
    
    //变量的命名规则：
        //1.有意义，规范
        //2.名字必须是字母、数字、下划线组成，不能有特殊字符且不能以数字开头
        //3.不能是关键字
    
    //C11 标准（ISO/IEC 9899:2011）中定义了以下关键字：
        //auto
        //break
        //case
        //char
        //const
        //continue
        //default
        //do
        //double
        //else
        //enum
        //extern
        //float
        //for
        //goto
        //if
        //inline
        //int
        //long
        //register
        //restrict
        //return
        //short
        //signed
            //signed 整数类型可以表示正数、负数和零。默认情况下，整数类型（如 int）通常被视为 signed
            //存放 signed 类型的储存单元中，左边第一位表示符号位。如果该位为0，表示该整数为正数；如果为1，表示该整数是一个负数
                //一个32位的整形变量，除去左边第一位符号位，实际上只有31个比特位来表示值
                //如果想完全使用储存单元，要把该整数 unsigned
        //unsigned
            //unsigned 整数类型只表示非负数（正数和零），因此它的取值范围比 signed 类型大，因其不需要表示负数
        //sizeof
            //用于获得数据类型或表达式的长度
            //sizeof(变量名);
            //sizeof(类型);
            //sizeof 对象;
        //static
        //struct
        //switch
        //typedef
        //union
        //void
        //volatile
        //while
        //_Alignas
        //_Alignof
        //_Atomic
        //_Bool
        //_Complex
        //_Decimal128
        //_Decimal32
        //_Decimal64
        //_Generic
        //_Imaginary
        //_Noreturn
        //_Static_assert
        //_Thread_local

    //数据类型:
        //基本类型
            //char，字符型,占1个字节,例：char ch1 = '1 '
            //short，短整型,占2个字节,例：short int a = 2
            //int，整型,例：int c = 55
            	// int 在32位系统下占 4 个字节，在16位系统下占 2 个字节
            //long，长整型
            //long long，更长的整型	
            //float，单精度浮点数,占4个字节,例：float a = 3.8f
            	// “3.8f”后面加上f 来修饰 float 类型。如果不加，编译器默认是 double 类型的
            //double，双精度浮点数,占8个字节,精度更高,例：double a = 1.22
            //布尔类型
            //枚举类型
        //指针类型
        //构造类型
            //数组类型
                //数组
int main()
{
	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };  
	    //arr是定义的数组，[]里每个元素都有序号，从0开始，叫做数组的下标。
	    //比如数组10个元素，第一个元素下标是"0"，第10个元素下标是"9"
	printf("%d\n", arr[9]);	  //打印数组里下标是9的元素
    int i = 0;
	while (i < 10)
	{
		printf("%d\n", arr[i]);  //打印此数组的所有10个元素
		i++;
	}
	return 0;
}

    //下面代码的输出结果是：随机值
int main()
{
	char arr[] = { 'b','i','t' };  //数组只有三个元素 [ b i t ]
        //但是因为 arr 没有指定有多少个元素，所以 bit 后面还有很大的空间
        //但是如果 原数组变成 arr[a] 其中 a 只要大于3，strlen输出结果就会变成3。
        //这种是不完全初始化，数组剩余的部分默认初始化为 0
	printf("%d\n", strlen(arr));
	strlen  //求字符串长度时候，数到\0就结束，但是 bit 后面的内容是随机的，不知道什么时候才会出现 \0
	    //strlen计算的是数组中 \0 之前的字符
	return 0;
}

    // C99标准之前，数组的大小都是用常量或者常量表达式来指定
        //例，int arr[5] = { 0 };
        //	int arr2[2 + 3] = { 0 };
	// C99标准之后，支持了变长数组，这个时候允许数组的大小是变量，但是这种指定方式的数组是不能初始化的。 VS 对C99的支持不是很好
        //例，int a = 5;
        //	int arr3[a];  可以
        //	int arr3[a] = { 0 }; 不可以，因为不能初始化

            //结构类型
            //联合类型
        //空类型

    //常量: 是值在程序运行时不会改变的量
        //整数常量：十进制、八进制、十六进制
        //浮点常量：普通小数、指数形式
        //字符常量：普通字符、转义序列
        //字符串常量：双引号括起来的字符序列
	    //C语言中没有字符串类型，类似 "sdfadgada" 由双引号引起来的一串字符称为字符串字面值
            //字符串的结束标志是一个 \0 的转义字符，在计算字符长度的时候 \0 是结束标志，不算字符内容
            //char 变量名[数量];
            
        //枚举常量：枚举类型定义的命名整数

        //计算机中的单位:
            //8 Bit = 1 Byte
            //1024 Byte = 1 Kb
            //1024 Kb = 1 Mb
            //1024 Mb = 1 Gb
            //1024 Gb = 1 Tb
            //1024 Tb = 1 Pb
    
        //二进制 (Binary)	 十进制 (Decimal)	十六进制 (Hexadecimal)
        //  0000 0000	           0	                0x00
        //  1111 1111	          255	                0xFF

    //常见的编码方法有：
        //原码（Sign-Magnitude）:
            //符号位为0表示正，1表示负
            //剩下的位直接表示数值的绝对值
        //补码（Two's Complement）:
            //符号位为0表示正，1表示负
            //正数的补码是该数的二进制形式
            //负数的表示方法：取其绝对值的二进制表示，逐位取反，再加1
            //优点：补码允许使用同一套电路进行加法和减法运算
                //在补码表示法中，加法和减法可以统一为加法操作，这简化了计算机的硬件设计，不需要额外处理符号位
        //反码（One's Complement）:
            //符号位为0表示正，1表示负
            //负数的表示方法：取其绝对值的二进制表示，逐位取反
            //反码存在两个零：正零和负零

    //常见的基本数据类型及其典型的取值范围
        //-------------------------------------------------------------------------------------------------------------------------
        //| 数据类型   |存储大小 (位) | 取值范围 (signed)                                       | 取值范围 (unsigned)             |
        //-------------------------------------------------------------------------------------------------------------------------
        //| int        | 32           | -2,147,483,648 到 2,147,483,647                         | 0 到 4,294,967,295              |
        //| short      | 16           | -32,768 到 32,767                                       | 0 到 65,535                     |
        //| long       | 64           | -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 | 0 到 18,446,744,073,709,551,615 |
        //| char       | 8            | -128 到 127                                             | 0 到 255                        |
        //| bool       | 可能是1字节  | true/false                                              | N/A                             |
        //| float      | 32           | ±1.4 × 10^-45 到 ±3.4 × 10^38                           | N/A                             |
        //| double     | 64           | ±4.9 × 10^-324 到 ±1.8 × 10^308                         | N/A                             |
        //-------------------------------------------------------------------------------------------------------------------------

    // 运算符：
        //算术运算符
            //  +	加法	a + b
            //  -	减法	a - b
            //  *	乘法	a * b
            //  /	除法	a / b
            //  %	取余	a % b
        //关系运算符
            //  ==	相等于	a == b
            //  !=	不等于	a != b
            //  >	大于	a > b
            //  <	小于	a < b
            //  >=	大于等于	a >= b
            //  <=	小于等于	a <= b
        //逻辑运算符
            //  &&	逻辑与	(a > 0) && (b < 10)
                //表示为 A && B，当 A 和 B 都为 true 时，结果为 true；否则结果为 false
            //  ||	逻辑或	(a == 0) || (b == 0)
                //表示为 A || B，当 A 或者 B 中至少有一个为 true 时，结果为 true；只有当 A 和 B 都为 false 时，结果才为 false
            //  !	逻辑非	!(a > b)
                //表示为 !A，将 A 的值取反，即如果 A 是 true，则 !A 结果为 false；如果 A 是 false，则 !A 结果为 true
        //赋值运算符
            //  =	赋值	a = b
            //  +=	加后赋值	a += b
            //  -=	减后赋值	a -= b
            //  *=	乘后赋值	a *= b
            //  /=	除后赋值	a /= b
            //  %=	取余后赋值 a %= b
        //自增和自减运算符
            //  ++	自增	a++ 或 ++a
            //  --	自减	a-- 或 --a
        //位运算符
            //  &	按位与	a & b
            //  |	按位或	a | b
            //  ^	按位异或	a ^ b
            //  ~	按位取反	~a
            //  <<	左移	a << b
            //  >>	右移	a >> b
            //  exp1? exp2: exp3;	条件运算符(仅有的三目运算符)
		        // exp1是条件表达式，如果为真，返回值exp2。否则返回exp3
        //逗号表达式：exp1,exp2,exp3,....,expN
            //用逗号隔开的一串表达式，从左向右依次计算，表达式的结果是最右边最后一个表达式的结果
        //其它：
            //  [] 下标引用
            //  () 函数调用
            //  . 用法：结构体对象 . 成员名
            //  -> 用法：结构体指针变量 -> 成员名
             
    //if语句
if (条件1)
{
    满足条件1后会执行的语句;
}
else if (条件2)
{
    满足条件2后会执行的语句;
}
else if (条件3) 
{
    满足条件3后会执行的语句;
}
...
else 
{
    所有条件都不满足后会执行的语句;
}

    //悬空else
int  main()
{
	int a = 0;
	int b = 2;
	{
		if (a == 1)
			if (b == 2)
				printf("1");
		else		/*else只和离它最近的if匹配，与和哪个if对齐没有关系。*/
			printf("2");
	}	/*可以用{ }框起一段代码，绑定在一起，称为代码块*/
	return 0;
}
    //小技巧：
	//在写( )内的判断语句时，把常量放在左面，比如
	//	if(5 == a)
	//	如果写成普通的 if (a == 5) 很可能因为粗心把 == 写成 =，导致代码变成if(a = 5)。
	//	但是这样仍然可以运行，代码不会报错，可是代码此时不具备判断功能。
	//	如果改成常量放在左面，if(5 = a)，这样是把变量赋给常量，代码会报错。可以提醒我们。

    //switch语句
switch(表达式)
{
    case 值1: 当表达式等于值1时执行的代码块;
        break;  //如果不加 break 语句会从跳入点接着执行，break会跳出 switch 语句
    case 值2: 当表达式等于值2时执行的代码块;
        break;
    case 值3: 当表达式等于值3时执行的代码块;
        break;
    ...
    default: 如果表达式的值与所有case都不匹配时执行的代码块;
        break;
    
}
   //好习惯：
	//在每个 case 结尾加上 break，防止前面忘加了。
	//在每个 switch 语句后加上 default,处理其它情况。

    //循环语句
        // while语句，入口条件循环
while (表达式)
    {
        循环内容;        
    }
        //当表达式为真时，执行循环内容
    //例，求输入了几个字符
#include <stdio.h>
int main()
{
    int i = 0;
    int getchar();
        //getchar() 是一个标准输入函数，它从标准输入（通常是键盘）读取下一个字符，并返回其 ASCII 值。
        //如果读取到文件末尾（或输入结束），它将返回 EOF。
    while (getchar() != '\n')
    {
         i ++;
    }
    printf("%d",i);
    return 0;
}

        // do ... while语句，出口条件循环,循环体至少循环一次
do
    {
        代码块;        
    }
while (表达式); /* 不要忘了 ; */    
    //先执行代码块，执行后再判断。如果表达式为真，再一次执行代码块。
    
        // for 语句
for (initialization; condition; increment)
    {
        循环内容;        
    }
        //initialization：在循环开始前执行的一次性语句，用于初始化循环控制变量。
        //condition：每次迭代开始前都会检查的表达式。如果 condition 为真，循环继续；如果为假，循环终止。
        //increment：每次迭代结束后执行的语句，用于更新循环控制变量。
            //这三个都可以省略，灵活运用
            //注意,不可以在 for 循环内部修改变量，防止其失去控制。
            
        // continue 语句
            //循环体的剩余部分会被忽略，直接进入下一层循环
                    
        // break 语句
            //直接跳出循环
        
        // goto 语句(非常容易出错，尽量不要用)
            // goto label;
                //goto语句是一种流程控制语句，它允许程序跳转到代码中的标记（label）处执行

    //常用标准库函数:
        //输入输出（stdio.h）
            //printf, fprintf, sprintf: 输出格式化字符串到控制台或文件。
            //scanf, fscanf, sscanf : 从控制台或文件中读取格式化输入。
            //putc, fputc, putc_unlocked, fputc_unlocked : 将字符写入文件。
            //getc, fgetc, getc_unlocked, fgetc_unlocked : 从文件中读取字符。
        //字符串操作（string.h）
            //strcpy, strncpy : 复制字符串。
            //strcat, strncat : 字符串连接。
            //strcmp, strncmp : 字符串比较。
            //strlen : 计算字符串长度。
            //strchr, strrchr : 在字符串中查找字符。
        //数学函数（math.h）
            //sin, cos, tan : 三角函数。
            //sqrt, pow : 平方根和幂函数。
            //ceil, floor : 向上取整和向下取整。
            //fabs, fmod : 绝对值和浮点数取余。
        //内存管理（stdlib.h）
            //malloc, calloc, realloc, free : 内存分配和释放。
            //abort, exit, atexit : 程序终止和退出处理。
        //时间和日期（time.h）
            //time, difftime : 获取当前时间和计算时间差。
            //asctime, ctime, strftime : 时间和日期格式化输出。
        //字符处理（ctype.h）
            //isalnum, isdigit, isalpha : 判断字符类型。
            //tolower, toupper : 字符大小写转换。
        //其他常用函数
            //rand, srand : 生成伪随机数序列。
            //qsort : 快速排序函数。
    



22、09、2024

#define _CRT_SECURE_NO_WARNINGS   //解决scanf返回值忽略的问题,只有VS编译器有这个问题

//C语言能够直接操作硬件，对内存的管理非常高效。
//这使得用 C 语言编写的程序运行速度快，占用资源少。
//例如，在操作系统、嵌入式系统等对性能要求极高的领域，C 语言是首选语言。

//计算机操作系统之上的叫做上层，之下的叫做底层。C语言擅长底层。

	//C语言自1972年诞生以来经历了多次标准化的更新，其中C90、C99、C11是三个重要的标准。
	//C90标准提供了C语言的编程基础，包括基本的数据类型和语法结构；
	//C99标准在此基础上增加了一些新的特性，如变长数组、内联函数等；
	//C11进一步增强了C语言的功能，引入了更多的并发和安全特性。
	//不同的C语言标准定义了不同的功能集，这对编程实践具有重要的意义。

	//计算机中的单位:
		//8 Bit(比特) = 1 Byte(字节)
		//1024 Byte = 1 Kb
		//1024 Kb = 1 Mb
		//1024 Mb = 1 Gb
		//1024 Gb = 1 Tb
		//1024 Tb = 1 Pb

	//.c 后缀是源文件
	//.h 后缀是头文件

	//注释方法：
	// 这种注释方法只能注释一行
	/*
		这种注释方法可以注释多行
		这种注释方法可以注释多行
		这种注释方法可以注释多行
	*/

//第一个程序：
#include<stdio.h>	//stdio 代表 standard_input_output
//int main()	//c语言代码中有且只有一个main函数，主函数。规定他是函数的入口。
//	//也有 void main() 这种写法，其中 void 代表 main 函数没有参数，不过基本被淘汰
//	// int代表整型类型
//{
//	printf("Hello World! 9/24");	// printf 是一个库函数，专门用于打印数据。在使用之前要声明 #include<stdio.h>
//	return 0;	//返回 0，整数
//}
	//运行代码快捷键 Ctrl + F5

	//数据类型，丰富的数据类型可以灵活使用，适合不同情况。
	//基本类型，C语言中没有字符串类型，类似 "sdfadgada" 由双引号引起来的一串字符称为字符串字面值。字符串的结束标志是一个 \0 的转义字符，在计算字符长度的时候 \0 是结束标志，不算字符内容
		//char，字符型,占1个字节,例：char ch1 = '1 '
		//short，短整型,占2个字节,例：short int a = 2
		//int，整型,例：int c = 55
			//int 在32位系统下占 4 个字节，在16位系统下占 2 个字节
		//long，长整型，占4个字节
		//long long，更长的整型，占8个字节
		//float，单精度浮点数,占4个字节,例：float a = 3.8f
			// “3.8f”后面加上f 来修饰 float 类型。如果不加，编译器默认是 double 类型的
		//double，双精度浮点数,占8个字节,精度更高,例：double a = 1.22

//探究数据类型的大小：
//int main()
//{
//	printf("%zu\n", sizeof(char));	// %zu 代表打印一个 sizeof 函数返回的无符号整型，单位是 Byte(字节)
//	printf("%zu\n", sizeof(short));
//	printf("%zu\n", sizeof(int));
//	printf("%zu\n", sizeof(long));
//	printf("%zu\n", sizeof(long long));
//	printf("%zu\n", sizeof(float));
//	printf("%zu\n", sizeof(double));
//	return 0;
//}
	//类型是为了创建变量，创建变量的本质是向内存申请空间

	//在 C语言中，不会变化的值称为常量，会变化的值称为变量
		//变量：明确目标并提供存放的空间
			//局部变量 - 在{ }内部定义的变量
				// 局部变量的作用域是局部变量所在的局部范围
				// 局部变量的生命周期是进入作用域生命周期开始，出作用域生命周期结束
			//全局变量 - 在{ }外部定义的变量
				// 全局变量的作用域是整个工程
				// 全局变量的生命周期是整个程序的生命周期
				
		//在全局变量和局部变量名字相同的情况下，局部优先
			//建议全局变量和局部变量的名字不要相同
			
    //小贴士：
		//定义变量的时候，一定要初始化。不可以直接 int a; 要写成 int a = 0;
    
    //变量的命名规则：
        //1.有意义，规范
        //2.名字必须是字母、数字、下划线组成，不能有特殊字符且不能以数字开头
		//3.不能是关键字

//计算输入的两个数之和：
//int main() 
//{
//	int num1 = 0;
//	int num2 = 0;
//	printf("请输入2个数，中间用空格隔开：");
//	scanf("%d %d", &num1, &num2);	// scanf 是一个输入函数
//	num1 = num1 + num2;
//	printf("两数之和为%d", num1);
//	return 0;
//}

	//常量: 是值在程序运行时不会改变的量
		//字面常量
		// const 修饰的常变量，例子 const int a = 10; 此时 a 本质上是变量，但是无法被修改，具有了常量的属性。
		// #define 定义的标识符常量，例子 #define Klaus 523 此时再提到 Klaus 时，就是 523 的标识，可以代表 523。定义后无法修改。
		//枚举常量：枚举类型定义的命名整数，例子 enum Sex { MALE, FEMALE, OTHER }

//求字符串长度：
//int main()
//{
//	int len = strlen("abcde");	// strlen 是求字符串长度的函数，本质上是识别到字符串结尾的 \0
//		//如果字符串结尾没有 \0，那么 strlen 就会一直向后查找直到找到，所以返回值会是一个随机数
//	printf("%d", len);
//	return 0;
//}


	//转义字符:
		/*
		 \? 在书写连续多个问号时使用，防止他们被解析成三字母词(现在已经消失)
		  \' 用于表示字符常量'
		  \" 用于表示一个字符产内部的双引号
		  \\ 用于表示一个反斜杠，防止它被解释为一个转义序列符
		  \a 警告字符，电脑会蜂鸣一下
		  \b 退格符
		  \f 进纸符
		  \n 换行
		  \r 回车
		  \t 水平制表符
		  \v 垂直制表符
		  \ddd ddd表示1~3个八进制的数字。如：\130 表示 X
		  \xdd dd表示2个十六进制数字。如: \x30 表示 0
		  %d - 打印整型
		  %c - 打印字符
		  %s - 打印字符串
		  %f - 打印float类型
		  %lf - 打印double类型
		  %zu - 打印sizeof的返回值
		*/

	//选择语句：
//if语句
//if (条件1)
//	{
//	满足条件1后会执行的语句;
//	}
//else if (条件2)
//	{
//	满足条件2后会执行的语句;
//	}
//else if (条件3)
//	{
//	满足条件3后会执行的语句;
//	}
//	...
//else
//	{
//	所有条件都不满足后会执行的语句;
//	}

//悬空else：
//int  main()
//{
//	int a = 0;
//	int b = 2;
//	{
//		if (a == 1)
//			if (b == 2)
//				printf("1");
//			else		/*else只和离它最近的if匹配，与和哪个if对齐没有关系。*/
//				printf("2");
//	}	/*可以用{ }框起一段代码，绑定在一起，称为代码块*/
//	return 0;
//}

	//小技巧：
		//在写( )内的判断语句时，把常量放在左面，比如
		// if(5 == a)
		//如果写成普通的 if (a == 5) 很可能因为粗心把 == 写成 =，导致代码变成if(a = 5)。
		//但是这样仍然可以运行，代码不会报错，可是代码此时不具备判断功能。
		//如果改成常量放在左面，if(5 = a)，这样是把变量赋给常量，代码会报错。可以提醒我们。

	//循环语句：
// while语句，入口条件循环
//while (表达式)
	//{
	//	循环内容;
	//}
	//当表达式为真时，执行循环内容

	//函数：函数是执行特定任务的代码块，它可以有返回值，也可以没有。
//求和函数例子
//int ADD(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//
//int main()
//{
//	int a = 5, b = 6;
//	int c = ADD(a, b);
//	printf("%d", c);
//	return 0;
//}

	//数组
//int main()
//{
//	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };
//	//arr是定义的数组，[]里每个元素都有序号，从0开始，叫做数组的下标。
//	//比如数组10个元素，第一个元素下标是"0"，第10个元素下标是"9"
//	printf("%d\n", arr[9]);	  //打印数组里下标是9的元素
//	int i = 0;
//	while (i < 10)
//	{
//		printf("%d\n", arr[i]);  //打印此数组的所有10个元素
//		i++;
//	}
//	return 0;
//}


	// C99标准之前，数组的大小都是用常量或者常量表达式来指定
		//例，int arr[5] = { 0 };
		//	int arr2[2 + 3] = { 0 };
	// C99标准之后，支持了变长数组，这个时候允许数组的大小是变量，但是这种指定方式的数组是不能初始化的。 VS 对C99的支持不是很好
		//例，int a = 5;
		//	int arr3[a];  可以
		//	int arr3[a] = { 0 }; 不可以，因为不能初始化

	// 操作符：
		//算术运算符
			//  -	减法	a - b
			//  *	乘法	a * b
			//  /	除法	a / b，当 a,b 都为整数时，执行整数除法，结果为整数。
			//  %	取余	a % b
			
		//关系运算符
			//  ==	相等于	a == b
			//  !=	不等于	a != b
			//  >	大于	a > b
			//  <	小于	a < b
			//  >=	大于等于	a >= b
			//  <=	小于等于	a <= b
			
		//逻辑运算符
			//  &&	逻辑与	(a > 0) && (b < 10)
				//表示为 A && B，当 A 和 B 都为 true 时，结果为 true；否则结果为 false
			//  ||	逻辑或	(a == 0) || (b == 0)
				//表示为 A || B，当 A 或者 B 中至少有一个为 true 时，结果为 true；只有当 A 和 B 都为 false 时，结果才为 false
			//  !	逻辑非	!(a > b)
				//表示为 !A，将 A 的值取反，即如果 A 是 true，则 !A 结果为 false；如果 A 是 false，则 !A 结果为 true
				
		//赋值运算符
			//  =	赋值	a = b
			//  +=	加后赋值	a += b
			//  -=	减后赋值	a -= b
			//  *=	乘后赋值	a *= b
			//  /=	除后赋值	a /= b
			//  %=	取余后赋值 a %= b
			
		//自增和自减运算符
			//  ++	自增	a++ 或 ++a
			//  --	自减	a-- 或 --a
			
		//位运算符
			//  &	按位与	a & b
			//  |	按位或	a | b
			//  ^	按位异或	a ^ b
			//  ~	按位取反	~a
			//  <<	左移	a << b
			//  >>	右移	a >> b
			//  exp1? exp2: exp3;	条件运算符(仅有的三目运算符)
				// exp1是条件表达式，如果为真，返回值exp2。否则返回exp3
				
		//逗号表达式：exp1,exp2,exp3,....,expN
			//用逗号隔开的一串表达式，从左向右依次计算，表达式的结果是最右边最后一个表达式的结果
			
		//其它：
			//  [] 下标引用
			//  () 函数调用
			//  (类型) 强制类型转换，例 int a = (int)3.14
			//  . 用法：结构体对象 . 成员名
			//  -> 用法：结构体指针变量 -> 成员名

	//C11 标准（ISO/IEC 9899:2011）中定义了以下关键字：
		//auto，基本可以省略
		//break
		//case
		//char
		//const
		//continue
		//default
		//do
		//double
		//else
		//enum，枚举
		//extern，声明外部符号
		//float
		//for
		//goto
		//if
		//inline
		//int
		//long
		//register，寄存器
		//restrict
		//return，函数返回值
		//short
		//signed
			//signed 整数类型可以表示正数、负数和零。默认情况下，整数类型（如 int）通常被视为 signed
			//存放 signed 类型的储存单元中，左边第一位表示符号位。如果该位为0，表示该整数为正数；如果为1，表示该整数是一个负数
				//一个32位的整形变量，除去左边第一位符号位，实际上只有31个比特位来表示值
				//如果想完全使用储存单元，要把该整数 unsigned
		//unsigned
			//unsigned 整数类型只表示非负数（正数和零），因此它的取值范围比 signed 类型大，因其不需要表示负数
		//sizeof
			//用于获得数据类型或表达式的长度
			//sizeof(变量名);
			//sizeof(类型);
			//sizeof 对象;
		//static，静态的
		//struct，结构体
		//switch
		//typedef，类型定义(重命名)
		//union，联合体
		//void，表示 无
		//volatile
		//while
		//_Alignas
		//_Alignof
		//_Atomic
		//_Bool
		//_Complex
		//_Decimal128
		//_Decimal32
		//_Decimal64
		//_Generic
		//_Imaginary
		//_Noreturn
		//_Static_assert
		//_Thread_local











        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
