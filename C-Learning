    //C语言是编译型语言
    //C语言特点：灵活度高，效率高，可移植度高

    //编辑器：只有编辑功能
    //“.c”为后缀的文件叫“源文件”
    //“.h”为后缀的文件叫“头文件”
    //添加新项目的时候后缀应该为“.c”, 如果后缀是”.cpp”编译器会按照C++的语法来编译代码
    //#define _CRT_SECURE_NO_WARNINGS   //解决scanf返回值忽略的问题,只有VS编译器有这个问题
    
    //计算机上的存储设备（按速度由高到低，空间由小到大排列）：
    //寄存器(集成到CPU上)
    //高速缓存(cache)
    //内存
    //硬盘

    //C语言语句可分为五类：
        //1.表达式语句
        //2.函数调用语句
        //3.控制语句，用于控制程序的执行流程，以实现程序的各种结构方式。
            //他们由特定的语句定义符组成，C语言有9种控制语句如下，
            //条件判断语句(分支语句)：if语句，switch语句
            //循环执行语句：do while语句，while语句，for语句
            //转向语句：break语句，goto语句，continue语句，return语句
        //4.复合语句
        //5.空语句

    
    // 这种注释方法只能注释一行
    /*
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
    */
    
    //转义字符:
        // \? 在书写连续多个问号时使用，防止他们被解析成三字母词(现在已经消失)
        //  \' 用于表示字符常量'
        //  \" 用于表示一个字符产内部的双引号
        //  \\ 用于表示一个反斜杠，防止它被解释为一个转义序列符
        //  \a 警告字符，蜂鸣
        //  \b 退格符
        //  \f 进纸符
        //  \n 换行
        //  \r 回车
        //  \t 水平制表符
        //  \v 垂直制表符
        //  \ddd ddd表示1~3个八进制的数字。如：\130 表示 X
        //  \xdd dd表示2个十六进制数字。如: \x30 表示 0
        //  %d - 打印整型
        //  %c - 打印字符
        //  %s - 打印字符串
        //  %f - 打印float类型
        //  %lf - 打印double类型
        //  %zu - 打印sizeof的返回值

#include<stdio.h>   //必须包含头文件
    //stdio.h 是头文件，std代表 standard 标准，i代表 input 输入，o代表 output 输出

int main()  //	//int 代表：整型类型
	//C语言代码中一定要有main函数，主函数是函数的入口，有且只有一个
{
    printf("Hello World!");  //每个语句后必须要用 ;
        //printf 是一个库函数，专门用来打印数据
    return 0;
}

    //变量：明确目标并提供存放的空间
        //局部变量 - 在{ }内部定义的变量
        	// 局部变量的作用域是局部变量所在的局部范围
        	// 局部变量的生命周期是进入作用域生命周期开始，出作用域生命周期结束
        //全局变量 - 在{ }外部定义的变量
        	// 全局变量的作用域是整个工程
        	// 全局变量的生命周期是整个程序的生命周期
        	//在全局变量和局部变量名字相同的情况下，局部优先
        	//建议全局变量和局部变量的名字不要相同
    
    
    //变量的命名规则：
        //1.有意义，规范
        //2.名字必须是字母、数字、下划线组成，不能有特殊字符且不能以数字开头
        //3.不能是关键字
        
    //C11 标准（ISO/IEC 9899:2011）中定义了以下关键字：
        //auto
        //break
        //case
        //char
        //const
        //continue
        //default
        //do
        //double
        //else
        //enum
        //extern
        //float
        //for
        //goto
        //if
        //inline
        //int
        //long
        //register
        //restrict
        //return
        //short
        //signed
            //signed 整数类型可以表示正数、负数和零。默认情况下，整数类型（如 int）通常被视为 signed
            //存放 signed 类型的储存单元中，左边第一位表示符号位。如果该位为0，表示该整数为正数；如果为1，表示该整数是一个负数
                //一个32位的整形变量，除去左边第一位符号位，实际上只有31个比特位来表示值
                //如果想完全使用储存单元，要把该整数 unsigned
        //unsigned
            //unsigned 整数类型只表示非负数（正数和零），因此它的取值范围比 signed 类型大，因其不需要表示负数
        //sizeof
            //用于获得数据类型或表达式的长度
            //sizeof(变量名);
            //sizeof(类型);
            //sizeof 对象;
        //static
        //struct
        //switch
        //typedef
        //union
        //void
        //volatile
        //while
        //_Alignas
        //_Alignof
        //_Atomic
        //_Bool
        //_Complex
        //_Decimal128
        //_Decimal32
        //_Decimal64
        //_Generic
        //_Imaginary
        //_Noreturn
        //_Static_assert
        //_Thread_local

    //数据类型:
        //基本类型
            //char，字符型,占1个字节,例：char ch1 = '1 '
            //short，短整型,占2个字节,例：short int a = 2
            //int，整型,例：int c = 55
            	// int 在32位系统下占 4 个字节，在16位系统下占 2 个字节
            //long，长整型
            //long long，更长的整型	
            //float，单精度浮点数,占4个字节,例：float a = 3.8f
            	// “3.8f”后面加上f 来修饰 float 类型。如果不加，编译器默认是 double 类型的
            //double，双精度浮点数,占8个字节,精度更高,例：double a = 1.22
            //布尔类型
            //枚举类型
        //指针类型
        //构造类型
            //数组类型
            //结构类型
            //联合类型
        //空类型

    //常量: 是值在程序运行时不会改变的量
        //整数常量：十进制、八进制、十六进制
        //浮点常量：普通小数、指数形式
        //字符常量：普通字符、转义序列
        //字符串常量：双引号括起来的字符序列
            //字符串的结束标志是一个 \0 的转义字符，在计算字符长度的时候 \0 是结束标志，不算字符内容
            //char 变量名[数量];
            
        //枚举常量：枚举类型定义的命名整数

        //计算机中的单位:
            //8 Bit = 1 Byte
            //1024 Byte = 1 Kb
            //1024 Kb = 1 Mb
            //1024 Mb = 1 Gb
            //1024 Gb = 1 Tb
            //1024 Tb = 1 Pb
    
        //二进制 (Binary)	 十进制 (Decimal)	十六进制 (Hexadecimal)
        //  0000 0000	           0	                0x00
        //  1111 1111	          255	                0xFF

    //常见的编码方法有：
        //原码（Sign-Magnitude）:
            //符号位为0表示正，1表示负
            //剩下的位直接表示数值的绝对值
        //补码（Two's Complement）:
            //符号位为0表示正，1表示负
            //正数的补码是该数的二进制形式
            //负数的表示方法：取其绝对值的二进制表示，逐位取反，再加1
            //优点：补码允许使用同一套电路进行加法和减法运算
                //在补码表示法中，加法和减法可以统一为加法操作，这简化了计算机的硬件设计，不需要额外处理符号位
        //反码（One's Complement）:
            //符号位为0表示正，1表示负
            //负数的表示方法：取其绝对值的二进制表示，逐位取反
            //反码存在两个零：正零和负零

    //常见的基本数据类型及其典型的取值范围
        //-------------------------------------------------------------------------------------------------------------------------
        //| 数据类型   |存储大小 (位) | 取值范围 (signed)                                       | 取值范围 (unsigned)             |
        //-------------------------------------------------------------------------------------------------------------------------
        //| int        | 32           | -2,147,483,648 到 2,147,483,647                         | 0 到 4,294,967,295              |
        //| short      | 16           | -32,768 到 32,767                                       | 0 到 65,535                     |
        //| long       | 64           | -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 | 0 到 18,446,744,073,709,551,615 |
        //| char       | 8            | -128 到 127                                             | 0 到 255                        |
        //| bool       | 可能是1字节  | true/false                                              | N/A                             |
        //| float      | 32           | ±1.4 × 10^-45 到 ±3.4 × 10^38                           | N/A                             |
        //| double     | 64           | ±4.9 × 10^-324 到 ±1.8 × 10^308                         | N/A                             |
        //-------------------------------------------------------------------------------------------------------------------------

    // 运算符：
        //算术运算符
            //  +	加法	a + b
            //  -	减法	a - b
            //  *	乘法	a * b
            //  /	除法	a / b
            //  %	取余	a % b
        //关系运算符
            //  ==	相等于	a == b
            //  !=	不等于	a != b
            //  >	大于	a > b
            //  <	小于	a < b
            //  >=	大于等于	a >= b
            //  <=	小于等于	a <= b
        //逻辑运算符
            //  &&	逻辑与	(a > 0) && (b < 10)
                //表示为 A && B，当 A 和 B 都为 true 时，结果为 true；否则结果为 false
            //  ||	逻辑或	(a == 0) || (b == 0)
                //表示为 A || B，当 A 或者 B 中至少有一个为 true 时，结果为 true；只有当 A 和 B 都为 false 时，结果才为 false
            //  !	逻辑非	!(a > b)
                //表示为 !A，将 A 的值取反，即如果 A 是 true，则 !A 结果为 false；如果 A 是 false，则 !A 结果为 true
        //赋值运算符
            //  =	赋值	a = b
            //  +=	加后赋值	a += b
            //  -=	减后赋值	a -= b
            //  *=	乘后赋值	a *= b
            //  /=	除后赋值	a /= b
            //  %=	取余后赋值	a %= b
        //自增和自减运算符
            //  ++	自增	a++ 或 ++a
            //  --	自减	a-- 或 --a
        //位运算符
            //  &	按位与	a & b
            //  |	按位或	a | b
            //  ^	按位异或	a ^ b
            //  ~	按位取反	~a
            //  <<	左移	a << b
            //  >>	右移	a >> b
        //  ?:	条件运算符	(a > b) ? a : b
        
    //if语句
if (条件)
{
    满足条件后会执行的语句;
    
}
