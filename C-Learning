    //C语言是编译型语言
    //C语言特点：灵活度高，效率高，可移植度高

    //编辑器：只有编辑功能
    //“.c”为后缀的文件叫“源文件”
    //“.h”为后缀的文件叫“头文件”
    //添加新项目的时候后缀应该为“.c”, 如果后缀是”.cpp”编译器会按照C++的语法来编译代码
    //#define _CRT_SECURE_NO_WARNINGS   //解决scanf返回值忽略的问题,只有VS编译器有这个问题
    
    // 这种注释方法只能注释一行
    /*
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
	    这种注释方法可以注释多行
    */
    
    //转义字符:
    //		\? 在书写连续多个问号时使用，防止他们被解析成三字母词(现在已经消失)
    //		\' 用于表示字符常量'
    //		\" 用于表示一个字符产内部的双引号
    //		\\ 用于表示一个反斜杠，防止它被解释为一个转义序列符
    //		\a 警告字符，蜂鸣
    //		\b 退格符
    //		\f 进纸符
    //		\n 换行
    //		\r 回车
    //		\t 水平制表符
    //		\v 垂直制表符
    //		\ddd ddd表示1~3个八进制的数字。如：\130 表示 X
    //		\xdd dd表示2个十六进制数字。如: \x30 表示 0
    //		%d - 打印整型
    //		%c - 打印字符
    //		%s - 打印字符串
    //		%f - 打印float类型
    //		%lf - 打印double类型
    //		%zu - 打印sizeof的返回值

#include<stdio.h>   //必须包含头文件
    //stdio.h 是头文件，std代表 standard 标准，i代表 input 输入，o代表 output 输出

int main()  //	//int 代表：整型类型
	//C语言代码中一定要有main函数，主函数是函数的入口，有且只有一个
{
    printf("Hello World!");  //每个语句后必须要用 ;
        //printf 是一个库函数，专门用来打印数据
    return 0;
}

    //变量：明确目标并提供存放的空间
        //局部变量 - 在{ }内部定义的变量
        	// 局部变量的作用域是局部变量所在的局部范围
        	// 局部变量的生命周期是进入作用域生命周期开始，出作用域生命周期结束
        //全局变量 - 在{ }外部定义的变量
        	// 全局变量的作用域是整个工程
        	// 全局变量的生命周期是整个程序的生命周期
        	//在全局变量和局部变量名字相同的情况下，局部优先
        	//建议全局变量和局部变量的名字不要相同
    
    
    //变量的命名规则：
        //1.有意义，规范
        //2.名字必须是字母、数字、下划线组成，不能有特殊字符且不能以数字开头
        //3.不能是关键字
        
    //C11 标准（ISO/IEC 9899:2011）中定义了以下关键字：
        //auto
        //break
        //case
        //char
        //const
        //continue
        //default
        //do
        //double
        //else
        //enum
        //extern
        //float
        //for
        //goto
        //if
        //inline
        //int
        //long
        //register
        //restrict
        //return
        //short
        //signed
        //sizeof
        //static
        //struct
        //switch
        //typedef
        //union
        //unsigned
        //void
        //volatile
        //while
        //_Alignas
        //_Alignof
        //_Atomic
        //_Bool
        //_Complex
        //_Decimal128
        //_Decimal32
        //_Decimal64
        //_Generic
        //_Imaginary
        //_Noreturn
        //_Static_assert
        //_Thread_local
        	
