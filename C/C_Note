#define _CRT_SECURE_NO_WARNINGS   //解决scanf返回值忽略的问题,只有VS编译器有这个问题

	//C语言能够直接操作硬件，对内存的管理非常高效。
	//这使得用 C 语言编写的程序运行速度快，占用资源少。
	//例如，在操作系统、嵌入式系统等对性能要求极高的领域，C 语言是首选语言。

	//计算机操作系统之上的叫做上层，之下的叫做底层。C语言擅长底层。

	//计算机上的存储设备（按速度由高到低，空间由小到大排列）：
		//寄存器(集成到CPU上)
		//高速缓存(cache)
		//内存
		//硬盘

	//C语言自1972年诞生以来经历了多次标准化的更新，其中C90、C99、C11是三个重要的标准。
	//C90标准提供了C语言的编程基础，包括基本的数据类型和语法结构；
	//C99标准在此基础上增加了一些新的特性，如变长数组、内联函数等；
	//C11进一步增强了C语言的功能，引入了更多的并发和安全特性。
	//不同的C语言标准定义了不同的功能集，这对编程实践具有重要的意义。

	//计算机中的单位:
		//8 Bit(比特) = 1 Byte(字节)
		//1024 Byte = 1 Kb
		//1024 Kb = 1 Mb
		//1024 Mb = 1 Gb
		//1024 Gb = 1 Tb
		//1024 Tb = 1 Pb

	//.c 后缀是源文件
	//.h 后缀是头文件
	
	// #define 可以定义标识符常量和宏，它不是关键字
		//宏是一种预处理器指令，在预编译阶段将宏名替换为后面的替换体。
		//使用方法： #define 宏名(宏的参数) 宏体
			//其中的 宏的参数 是无类型的，它们可能出现在 宏体 中
//宏定义例子：
//#define SQ(x) x*x
//printf("%d \n", SQ(6 + 1));	 //结果是 49，宏是把参数替换到文本中，也就是宏直接把 6+1 替换掉了 x 直接带入了后面的表达式当中
	//但是为了规范和减少失误，每个参数都要用 () 括起来，如 #define SQ(x) （x）*（x）

//取消宏定义#undef 
//#define SORT 1000
//#undef SORT
	//在#undef之后SORT就相当于没有定义，失效了。再使用则会报错
	//一般来讲函数的宏的使用语法很相似。所以把宏名全部大写,函数名不要全部大写用来区分

	//注释方法：
	// 这种注释方法只能注释一行
	/*
		这种注释方法可以注释多行
		这种注释方法可以注释多行
		这种注释方法可以注释多行
	*/

//第一个程序：
#include<stdio.h>	//stdio 代表 standard_input_output
//int main()	//c语言代码中有且只有一个main函数，主函数。规定他是函数的入口。
//	//也有 void main() 这种写法，其中 void 代表 main 函数没有参数，不过基本被淘汰
//	// int代表整型类型
//{
//	printf("Hello World! 9/24");	// printf 是一个库函数，专门用于打印数据。在使用之前要声明 #include<stdio.h>
//	return 0;	//返回 0，整数
//}
	//运行代码快捷键 Ctrl + F5

	//数据类型，丰富的数据类型可以灵活使用，适合不同情况。
	//基本类型，C语言中没有字符串类型，类似 "sdfadgada" 由双引号引起来的一串字符称为字符串字面值。字符串的结束标志是一个 \0 的转义字符，在计算字符长度的时候 \0 是结束标志，不算字符内容
		//char，字符型,占1个字节,例：char ch1 = '1 '
		//short，短整型,占2个字节,例：short int a = 2
		//int，整型,例：int c = 55
			//int 在32位系统下占 4 个字节，在16位系统下占 2 个字节
		//long，长整型，占4个字节
		//long long，更长的整型，占8个字节
		//float，单精度浮点数,占4个字节,例：float a = 3.8f
			// “3.8f”后面加上f 来修饰 float 类型。如果不加，编译器默认是 double 类型的
		//double，双精度浮点数,占8个字节,精度更高,例：double a = 1.22

//探究数据类型的大小：
//int main()
//{
//	printf("%zu\n", sizeof(char));	// %zu 代表打印一个 sizeof 函数返回的无符号整型，单位是 Byte(字节)
//	printf("%zu\n", sizeof(short));
//	printf("%zu\n", sizeof(int));
//	printf("%zu\n", sizeof(long));
//	printf("%zu\n", sizeof(long long));
//	printf("%zu\n", sizeof(float));
//	printf("%zu\n", sizeof(double));
//	return 0;
//}
	//类型是为了创建变量，创建变量的本质是向内存申请空间

	//在 C语言中，不会变化的值称为常量，会变化的值称为变量
		//变量：明确目标并提供存放的空间
			//局部变量 - 在{ }内部定义的变量
				// 局部变量的作用域是局部变量所在的局部范围
				// 局部变量的生命周期是进入作用域生命周期开始，出作用域生命周期结束
			//全局变量 - 在{ }外部定义的变量
				// 全局变量的作用域是整个工程
				// 全局变量的生命周期是整个程序的生命周期
				
		//在全局变量和局部变量名字相同的情况下，局部优先
			//建议全局变量和局部变量的名字不要相同
			
    //小贴士：
		//定义变量的时候，一定要初始化。不可以直接 int a; 要写成 int a = 0;
    
    //变量的命名规则：
        //1.有意义，规范
        //2.名字必须是字母、数字、下划线组成，不能有特殊字符且不能以数字开头
		//3.不能是关键字

//计算输入的两个数之和：
//int main() 
//{
//	int num1 = 0;
//	int num2 = 0;
//	printf("请输入2个数，中间用空格隔开：");
//	scanf("%d %d", &num1, &num2);	// scanf 是一个输入函数
//	num1 = num1 + num2;
//	printf("两数之和为%d", num1);
//	return 0;
//}

	//常量: 是值在程序运行时不会改变的量
		//字面常量
		// const 修饰的常变量，例子 const int a = 10; 此时 a 本质上是变量，但是无法被修改，具有了常量的属性。
		// #define 定义的标识符常量，例子 #define Klaus 523 此时再提到 Klaus 时，就是 523 的标识，可以代表 523。定义后无法修改。
		//枚举常量：枚举类型定义的命名整数，例子 enum Sex { MALE, FEMALE, OTHER }

//求字符串长度：
//int main()
//{
//	int len = strlen("abcde");	// strlen 是求字符串长度的函数，本质上是识别到字符串结尾的 \0
//		//如果字符串结尾没有 \0，那么 strlen 就会一直向后查找直到找到，所以返回值会是一个随机数
//	printf("%d", len);
//	return 0;
//}


	//转义字符:
		/*
		 \? 在书写连续多个问号时使用，防止他们被解析成三字母词(现在已经消失)
		  \' 用于表示字符常量'
		  \" 用于表示一个字符产内部的双引号
		  \\ 用于表示一个反斜杠，防止它被解释为一个转义序列符
		  \a 警告字符，电脑会蜂鸣一下
		  \b 退格符
		  \f 进纸符
		  \n 换行
		  \r 回车
		  \t 水平制表符
		  \v 垂直制表符
		  \ddd ddd表示1~3个八进制的数字。如：\130 表示 X
		  \xdd dd表示2个十六进制数字。如: \x30 表示 0
		  %d - 打印整型
		  %c - 打印字符
		  %s - 打印字符串
		  %f - 打印float类型
		  %lf - 打印double类型
		  %zu - 打印sizeof的返回值
		*/

	//选择语句：
//if语句
//if (条件1)
//	{
//	满足条件1后会执行的语句;
//	}
//else if (条件2)
//	{
//	满足条件2后会执行的语句;
//	}
//else if (条件3)
//	{
//	满足条件3后会执行的语句;
//	}
//	...
//else
//	{
//	所有条件都不满足后会执行的语句;
//	}

//悬空else：
//int  main()
//{
//	int a = 0;
//	int b = 2;
//	{
//		if (a == 1)
//			if (b == 2)
//				printf("1");
//			else		/*else只和离它最近的if匹配，与和哪个if对齐没有关系。*/
//				printf("2");
//	}	/*可以用{ }框起一段代码，绑定在一起，称为代码块*/
//	return 0;
//}

	//小技巧：
		//在写( )内的判断语句时，把常量放在左面，比如
		// if(5 == a)
		//如果写成普通的 if (a == 5) 很可能因为粗心把 == 写成 =，导致代码变成if(a = 5)。
		//但是这样仍然可以运行，代码不会报错，可是代码此时不具备判断功能。
		//如果改成常量放在左面，if(5 = a)，这样是把变量赋给常量，代码会报错。可以提醒我们。

	//循环语句：
// while语句，入口条件循环
//while (表达式)
	//{
	//	循环内容;
	//}
	//当表达式为真时，执行循环内容

	//函数：函数是执行特定任务的代码块，它可以有返回值，也可以没有。
//求和函数例子
//int ADD(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//
//int main()
//{
//	int a = 5, b = 6;
//	int c = ADD(a, b);
//	printf("%d", c);
//	return 0;
//}

	//数组
//int main()
//{
//	int arr[10] = { 0,1,2,3,4,5,6,7,8,9 };
//	//arr是定义的数组，[]里每个元素都有序号，从0开始，叫做数组的下标。
//	//比如数组10个元素，第一个元素下标是"0"，第10个元素下标是"9"
//	printf("%d\n", arr[9]);	  //打印数组里下标是9的元素
//	int i = 0;
//	while (i < 10)
//	{
//		printf("%d\n", arr[i]);  //打印此数组的所有10个元素
//		i++;
//	}
//	return 0;
//}


	// C99标准之前，数组的大小都是用常量或者常量表达式来指定
		//例，int arr[5] = { 0 };
		//	int arr2[2 + 3] = { 0 };
	// C99标准之后，支持了变长数组，这个时候允许数组的大小是变量，但是这种指定方式的数组是不能初始化的。 VS 对C99的支持不是很好
		//例，int a = 5;
		//	int arr3[a];  可以
		//	int arr3[a] = { 0 }; 不可以，因为不能初始化

	// 操作符：
		//算术运算符
			//  -	减法	a - b
			//  *	乘法	a * b
			//  /	除法	a / b，当 a,b 都为整数时，执行整数除法，结果为整数。
			//  %	取余	a % b
			
		//关系运算符
			//  ==	相等于	a == b
			//  !=	不等于	a != b
			//  >	大于	a > b
			//  <	小于	a < b
			//  >=	大于等于	a >= b
			//  <=	小于等于	a <= b
			
		//逻辑运算符
			//  &&	逻辑与	(a > 0) && (b < 10)
				//表示为 A && B，当 A 和 B 都为 true 时，结果为 true；否则结果为 false
			//  ||	逻辑或	(a == 0) || (b == 0)
				//表示为 A || B，当 A 或者 B 中至少有一个为 true 时，结果为 true；只有当 A 和 B 都为 false 时，结果才为 false
			//  !	逻辑非	!(a > b)
				//表示为 !A，将 A 的值取反，即如果 A 是 true，则 !A 结果为 false；如果 A 是 false，则 !A 结果为 true
				
		//赋值运算符
			//  =	赋值	a = b
			//  +=	加后赋值	a += b
			//  -=	减后赋值	a -= b
			//  *=	乘后赋值	a *= b
			//  /=	除后赋值	a /= b
			//  %=	取余后赋值 a %= b
			
		//自增和自减运算符
			//  ++	自增	a++ 或 ++a
			//  --	自减	a-- 或 --a
			
		//位运算符
			//  &	按位与	a & b （这里注意与取地址符区分）
			//  |	按位或	a | b
			//  ^	按位异或	a ^ b
			//  ~	按位取反	~a
			//  <<	左移	a << b
			//  >>	右移	a >> b
			//  exp1? exp2: exp3;	条件运算符(仅有的三目运算符)
				// exp1是条件表达式，如果为真，返回值exp2。否则返回exp3
				
		//逗号表达式：exp1,exp2,exp3,....,expN
			//用逗号隔开的一串表达式，从左向右依次计算，表达式的结果是最右边最后一个表达式的结果
			
		//其它：
			//  & 取地址符，例 &a，为取a的内存地址
			//  * 解引用操作符，例 *p，意思就是通过 p 中存放的地址，找到 p 所指向的对象
			//  [] 下标引用
			//  () 函数调用
			//  (类型) 强制类型转换，例 int a = (int)3.14
			//  . 用法：结构体对象 . 成员名
			//  -> 用法：结构体指针变量 -> 成员名
			//  # 预处理，是指在进行编译的第一遍扫描（词法扫描和语法分析）之前所做的工作。
				//预处理是C语言的一个重要的功能，它由预处理程序负责完成。当对一个源文件进行编译时，系统将自动引用预处理程序对源程序中的预处理部分作处理，处理完毕后自动进入对源程序的编译。
				//程序中以“#”开头的预处理命令，如包含命令#include，宏定义命令#define等。

	//C11 标准（ISO/IEC 9899:2011）中定义了以下关键字：
		//auto，基本可以省略
		//break
		//case
		//char
		//const
		//continue
		//default
		//do
		//double
		//else
		//enum，枚举
		//extern，声明外部符号
		//float
		//for
		//goto
		//if
		//inline
		//int
		//long
		//register，寄存器变量，建议编译器将此变量放置在寄存器内，但是并不一定成功
		//restrict
		//return，函数返回值
		//short
		//signed
			//signed 整数类型可以表示正数、负数和零。默认情况下，整数类型（如 int）通常被视为 signed
			//存放 signed 类型的储存单元中，左边第一位表示符号位。如果该位为0，表示该整数为正数；如果为1，表示该整数是一个负数
				//一个32位的整形变量，除去左边第一位符号位，实际上只有31个比特位来表示值
				//如果想完全使用储存单元，要把该整数 unsigned
		//unsigned
			//unsigned 整数类型只表示非负数（正数和零），因此它的取值范围比 signed 类型大，因其不需要表示负数
		//sizeof
			//用于获得数据类型或表达式的长度
			//sizeof(变量名);
			//sizeof(类型);
			//sizeof 对象;
		//static，静态的，修饰局部变量时，局部变量出了作用域也不销毁，生命周期变得和程序一样。本质上是改变了变量的存储位置。
			//修饰全局变量时，因为全局变量具有外部链接属性，static会将其修改为内部链接属性。使得其它源文件无法使用此全局变量
			//修饰函数时，因为函数具有外部链接属性，static会将其修改为内部链接属性。使得其它源文件无法使用此函数
			//内存分为 栈区，堆区，静态区， static 修饰的变量放在静态区 
		//struct，结构体
		//switch
		//typedef，类型定义(重命名)，例子 typedef unsigned int unit; 
		//union，联合体
		//void，表示 无
		//volatile
		//while
		//_Alignas
		//_Alignof
		//_Atomic
		//_Bool
		//_Complex
		//_Decimal128
		//_Decimal32
		//_Decimal64
		//_Generic
		//_Imaginary
		//_Noreturn
		//_Static_assert
		//_Thread_local


	//指针：内存单元的编号 -> 地址 -> 指针。存放地址的变量就是指针变量。
		//不管什么类型的指针，都是用来创建指针变量来存放地址。
		//指针变量的大小取决于一个地址存放的时候需要多大的空间。
			//32位机器上的地址是 32 Bit -> 4 Byte，所以指针变量的大小为 4 Byte
			//64位机器上的地址是 64 Bit -> 8 Byte，所以指针变量的大小为 8 Byte 
	//内存是电脑上特别重要的储存器，计算机中的程序都是在内存中进行的。
	//为了更好的使用内存，把内存分为一个个小的单元(一个Byte)，每个单元都有一个唯一的地址,用十六进制表示
int main()
{
	int a = 10;	//向内存申请4个字节，储存10
	&a;	//取 a 的地址
	printf("%p\n", &a);	//打印 a 的地址
	int* p = &a;	//此时的 p 就是指针变量，它的类型是 int*
		// int* 其中的 * 说明 p 是指针变量，前面的 int 说明 p 指向的对象是 int 类型
		//当定义多个指针时，每个指针都要有 * ，例 int *a, *b, *c;
	printf("%d", *p);	// 解引用指针
	return 0;
}
